openapi: 3.0.0
info:
  title: Exampe_Trello
  version: 0.0.1
servers:
  - url: http://localhost:8000/api/
    description: dev server
paths:
  /register:
    post:
      summary: "Метод регистрации нового пользователя в системе"
      tags:
        - Auth
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        '201':
          description: "Успешный ответ с зарегестрированным пользователем"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success201"
        '422':
          description: "Ошибка клинета: данные не прошли валидацию."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error422"
        '401':
          description: "Ошибка клиента: клиент ввёл логин уже существующего пользователя"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
        '500':
          description: "Ошибка на сервере: внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"
  /login:
    post:
      summary: "Метод авторизации пользователя в системе"
      tags:
        - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        '200':
          description: "Успешный ответ с авторизованным пользователем"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success200"
        '422':
          description: "Ошибка клинета: данные не прошли валидацию."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error422"
        '500':
          description: "Ошибка на сервере: внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"
  /logout:
    post:
      summary: "Метод для выхода пользователя из системы"
      tags:
        - Auth
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrentUser"
      responses:
        '200':
          description: "Пользователь вышел из системы"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success200"
        '500':
          description: "Ошибка на сервере: внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"

components:
  schemas:
    CurrentUser:
      type: object
      required:
        - email
        - token
      properties:
        email:
          type: string
          example: 'tralivali@gmail.com'
        token:
          type: string
          example: "1|fdsfo983409r34053ka9uf7YT&^T^R94"
  
    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: 'Артемий'
        password:
          type: string
          example: '123321'
        email:
          type: string
          example: 'tralivali@gmail.com'
          
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "tralivali@gmail.com"
        password:
          type: string
          example: "klimushkin1942"
      
    UserLogout:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: ""
    
    Success200:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: 'User is authorized'
        token:
          type: string
          example: "1|fdsfo983409r34053ka9uf7YT&^T^R94"
          
    Success201:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: 'User is created'
        token:
          type: string
          example: "1|fdsfo983409r34053ka9uf7YT&^T^R94"
  
    Error422:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Data is not valid"
          
    Error401:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "This email is exist's"

    Error500:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Somethins went wrong"